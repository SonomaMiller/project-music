import React, { useState } from 'react';
import LikeButton from './LikeButton.jsx'; // Import the LikeButton component

function AllSongsPage(props) {
    const [selectedGenre, setSelectedGenre] = useState('all');
    const [searchQuery, setSearchQuery] = useState('');
    const [likedSongs, setLikedSongs] = useState([]); // Track liked songs

    // DATA COPY TO MANIPULATE
    const songs = props.songs || []; // added a fallback to prevent errors if props.songs is undefined

    // FILTER SONGS BASED ON SELECTED GENRE AND SEARCH QUERY
    let filteredSongs = songs;

    if (selectedGenre !== 'all') {
        filteredSongs = filteredSongs.filter((song) =>
            song.genre.includes(selectedGenre)
        );
    }

    if (searchQuery !== '') {
        filteredSongs = filteredSongs.filter((song) =>
            song.title.toLowerCase().includes(searchQuery) ||
            song.artist.toLowerCase().includes(searchQuery)
        );
    }

    // Handle like button toggle
    const handleLikeToggle = (songId) => {
        setLikedSongs((prevLikes) => {
            if (prevLikes.includes(songId)) {
                return prevLikes.filter((id) => id !== songId); // Remove if already liked
            } else {
                return [...prevLikes, songId]; // Add to liked songs
            }
        });
    };

    // Render each song element
    const songElemArray = filteredSongs.map((songObj) => {
        return (
            <tr key={songObj.title}>
                <td>
                    <a href={songObj.spotify_link} target='_blank' rel="noopener noreferrer">
                        <img className='allSongsImg' src={songObj.album_cover} alt={songObj.title} />
                    </a>
                </td>
                <td>
                    <div className='song-info'>
                        <h2>{songObj.title}</h2>
                        <h3>{songObj.artist}</h3>
                        <p>Likes: {likedSongs.filter(id => id === songObj.title).length}</p> {/* Use song title instead of spotify_link */}
                    </div>
                </td>
                {/* Heart-Shaped Like Button */}
                <td>
                    <LikeButton
                        isLiked={likedSongs.includes(songObj.title)} // Check if the song is liked by title
                        onClick={() => handleLikeToggle(songObj.title)} // Toggle like on click
                    />
                </td>
            </tr>
        );
    });

    // Handle genre filter selection
    const handleSelectedGenre = (event) => {
        setSelectedGenre(event.target.value);
    };

    // Create genre options
    const genreSet = new Set(songs.map(songObj => songObj.genre)); // No need for .flat() here
    const genres = Array.from(genreSet).map((genre) => (
        <option key={genre} value={genre}>{genre}</option>
    ));

    // Handle search query input
    const handleSearch = (event) => {
        setSearchQuery(event.target.value.toLowerCase());
    };

    return (
        <section id="song-box">
            <section id='search-filter'>
                <form id='search-bar'>
                    <input
                        id='search-input'
                        type='text'
                        size='80'
                        placeholder='&#128270; Search songs'
                        value={searchQuery}
                        onChange={handleSearch}
                    />
                </form>
                <div id='filters'>
                    <div>
                        <select id='genre-filter' className='filter' value={selectedGenre} onChange={handleSelectedGenre}>
                            <option value='all'>All Genres</option>
                            {genres}
                        </select>
                    </div>
                </div>
            </section>
            
            <table>
                <thead>
                    <tr>
                        <th>Album</th>
                        <th>Song Info</th>
                        <th>Likes</th>
                    </tr>
                </thead>
                <tbody>
                    {/* Render filtered songs */}
                    {songElemArray}
                </tbody>
            </table>
        </section>
    );
}

export default AllSongsPage;
